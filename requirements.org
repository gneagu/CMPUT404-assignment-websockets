* Explore using Websockets to make a shared state interactive application
** Description


** User Stories
   - As a web browser user I want to draw on the canvas
   - As a web browser user I want to see others drawing on the canvas
   - As a web browser user I want the system to be responsive to my
     actions (< 100ms)
   - As a web browser user I want to watch as other users draw on the
     canvas
   - As a web service user I want to get access to the world
   - As a web service user I want to post entities that have at least
     'x' and 'y' co-ordinates
   - As a web service user I will probably ping the system a lot to
     get updates.

** Requirements

   - [ ] Implement the Websockets Javascript parts in the HTML file static/index.htm
   - [X] Implement the Websockets send/recv part of the webservice
   - [X] Upon update all the clients should recv a websocket update message
   - [X] Use JSON to communicate (no plain text!)
   - [X] The webservice can pass all the tests in freetests.py
   - [ ] The webservice can pass all the tests in not-free-tests.py (you only have part of this one, I reserve the right to add tests)
   - [X] The webservice can serve /static/index.html
   - [ ] static/index.html displays the current state of the webservice
   - [ ] static/index.html responds to clicks within 100ms on average
   - [ ] Make static/index.html images look nice

 
** Restrictions

   - To mark your assignment I should be able to type:
     cd yourccid
     bash runtests.sh
]
** Marking
   - 3 marks for passing all of the tests 
   - 1 mark for passing all of not-free-tests
   - 2 marks for being usable in the browser
   - 1 mark for looking better than what I gave you
     
